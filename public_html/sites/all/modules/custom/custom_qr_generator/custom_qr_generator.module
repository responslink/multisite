<?php

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Exception\RequestException;
use Symfony\Component\HttpFoundation\RedirectResponse;

function custom_qr_generator_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
	if ($node->getType() == 'qr_node') {
		// Hide "Custom URL" field
		$build['field_custom_url'] = array(
			'#type' => 'markup',
			'#markup' => '',
		);
		// Hide "QR Image" field's title
		$build['field_qr_img']['#title'] = '';
	}
}

function custom_qr_generator_form_node_form_alter(&$form, FormStateInterface $form_state) {
	$node = $form_state->getFormObject()->getEntity();
	if ($node->getType() == 'qr_node') {
		// Hide the "QR Image" field
		$form['field_qr_img'] = array('#markup' => '');
	}
	$form['#validate'][] = 'custom_qr_generator_node_validate';
}

function custom_qr_generator_node_validate(&$form, FormStateInterface $form_state) {
	$outgoing_url = $form_state->getValue('field_outgoing_url');
  $incoming_url = $form_state->getValue('field_incoming_url');

  // Check if the incoming URL is unique
  $query = \Drupal::entityQuery('node')
  ->condition('status', 1)
  ->condition('type', 'qr_node')
  ->condition('field_incoming_url.value', $incoming_url[0]['value'], '=');

  $result = $query->execute();

  if (count($result) > 0 && !empty($incoming_url[0]['value'])) {
    $form_state->setErrorByName('field_incoming_url', t('The incoming URL is not unique.'));
  }
}

/**
 * Implments hook_node_presave().
 */
function custom_qr_generator_node_presave($node) {
  if ($node->getType() == 'qr_node') {
    if (empty($node->get('field_incoming_url')->getValue())) {
      $url = str_replace(' ', '-', $node->getTitle());
      $url = str_replace(array('æ', 'ø', 'å', ' '), array('ae', 'oe', 'aa', '-'), $node->getTitle());
      $url = preg_replace('/[^A-Za-z0-9\-]/', '', $url);
      $url = strtolower($url);
      $node->set('field_incoming_url', $url);
    }
  }
}

function custom_qr_generator_node_insert($node) {
	if ($node->getType() == 'qr_node') {
		// Add node into stats table
		db_insert('custom_qr_generator_stats')
			->fields(array('qrnid' => $node->id()))->execute();

    if (empty($node->get('field_incoming_url')->getValue())) {
      $url = str_replace(' ', '-', $node->getTitle());
      $url = str_replace(array('æ', 'ø', 'å', ' '), array('ae', 'oe', 'aa', '-'), $node->getTitle());
      $url = preg_replace('/[^A-Za-z0-9\-]/', '', $url);
      $url = strtolower($url);
      $node->set('field_incoming_url', $url);
    }

		$custom_url = sprintf('%s/qr/%s'
			, $GLOBALS['base_url']
			, $node->get('field_incoming_url')->getValue()
		);

		$img_dir = sprintf('public://%s', date("Y-m"));
		$dest_uri = sprintf('%s/%s.png', $img_dir, $node->getTitle());

		file_prepare_directory($img_dir, FILE_CREATE_DIRECTORY);

		// Create a new image
		$data = _custom_qr_generator_qr_img_stream($custom_url);
		$file = file_save_data($data, $dest_uri);

		// Add logo to that image
		if (isset($node->get('field_qr_logo')->target_id)) {
			$tmp_file = $file;
			$logo_file = File::load($node->get('field_qr_logo')->target_id);
			$file = _custom_qr_generator_add_logo_2_qr($file, $logo_file);
			$tmp_file->delete();
			$logo_file->delete();
		}

		// Attach that new image with a node
		$node->field_qr_img->setValue(array(
			'alt' => $custom_url,
			'display' => '1',
			'target_id' => $file->id(),
		));

		$node->setNewRevision(FALSE);
		$node->save();
	}
}


function custom_qr_generator_page_attachments(array &$page) {
	$page['#attached']['library'][] = 'custom_qr_generator/custom-qr-generator-style';
	_custom_qr_generator_frontpage_redirect();
}


function custom_qr_generator_user_login($account) {
	$response = new RedirectResponse($GLOBALS['base_url'] . '/admin/qr-admin');
	$response->send();
	return;
}


function custom_qr_generator_node_delete(EntityInterface $node) {
	if ($node->getType() == 'qr_node') {
		db_delete('custom_qr_generator_stats')
			->condition('qrnid', $node->id())->execute();

		// Remove QR image file
		$qr_img = File::load($node->get('field_qr_img')->target_id);
		if ($qr_img) $qr_img->delete();
	}
}


function custom_qr_generator_cron() {
	$client = new GuzzleHttp\Client();

	$query = db_select('custom_qr_generator_stats', 'cqrs');
	$query->join('node__field_outgoing_url', 'fcu', 'cqrs.qrnid = fcu.entity_id');
	$query->fields('cqrs', array('url_status', 'qrnid'));
	$query->fields('fcu', array('field_outgoing_url_value'));
	$data = $query->execute()->fetchAll();
  $statuses = array();

  // Collect statuses and ID's
	foreach ($data as $d) {
		try {
			$res = $client->request('GET', $d->field_outgoing_url_value);
			$status = $res->getStatusCode();
		} catch (BadResponseException $e) {
			$status = $e->getResponse()->getStatusCode();
		} catch (RequestException $e) {
			$status = '?'; // Some other error
		}

    _custom_qr_generator_set_status($d->qrnid, $status);
    $statuses[$d->qrnid] = $status;
	}

  _custom_qr_generator_send_status_mail($statuses);
}


/* Helper functions */

function _custom_qr_generator_set_status($id, $status_code) {
	$status = ($status_code == '200') ? 'OK' : 'FAILED';

	db_update('custom_qr_generator_stats')
		->condition('qrnid', $id)
		->fields(array('url_status' => $status))
		->execute();
}

function _custom_qr_generator_send_status_mail($statuses) {
  $failed = array();
  $to = '';

  $ids = \Drupal::entityQuery('user')
  ->condition('status', 1)
  ->condition('roles', 'administrator')
  ->execute();
  $users = User::loadMultiple($ids);

  foreach ($users as $user) {
    $to .= $user->getEmail() . ',';
  }

  foreach ($statuses as $id => $status) {
    $status_text = ($status == '200') ? 'OK' : 'FAILED';
    if ($status_text == 'FAILED') {
      $node = Node::load($id);
      $failed[$id] = $node->getTitle();
    }
  }

  if (!empty($failed)) {
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'custom_qr_generator';
    $key = 'qr_code_status_failed';
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $params['failed'] = $failed;
    $mailManager->mail($module, $key, $to, $langcode, $params, $send = FALSE);
  }
}


function _custom_qr_generator_qr_img_stream($msg) {
	require_once  dirname(__FILE__) . '/phpqrcode/qrlib.php';

	$source_data = function($m) {
		ob_start();
		QRcode::png($m, false, QR_ECLEVEL_H, 5, 2);
		$result = ob_get_contents();
		ob_end_clean();

		return $result;
	};

	ob_start();
	header('Content-Type: image/png');

	$source_img = imagecreatefromstring($source_data($msg));
	$old_w = imagesx($source_img);
	$old_h = imagesy($source_img);
	$size = 200;
	$dest_img = imagecreatetruecolor($size, $size);

	imagecopyresampled($dest_img, $source_img, 0, 0, 0, 0, $size, $size, $old_w, $old_h);
	imagepng($dest_img);
	imagedestroy($dest_img);

	$content = ob_get_contents();
	ob_end_clean();

	return $content;
}


function _custom_qr_generator_add_logo_2_qr($qr_img_obj, $qr_logo_obj) {

	ob_start();
	header('Content-type: image/png');

	$QR = imagecreatefromstring(file_get_contents($qr_img_obj->getFileUri()));
	$logo = imagecreatefromstring(file_get_contents($qr_logo_obj->getFileUri()));

	$QR_width = imagesx($QR);
	$QR_height = imagesy($QR);
	$logo_width = imagesx($logo);
	$logo_height = imagesy($logo);

	// Scale logo to fit in the QR Code
	if ($logo_width >= $logo_height) {
		$logo_qr_width = $QR_width / 2.3;
		$scale = $logo_width / $logo_qr_width;
		$logo_qr_height = $logo_height / $scale;
	} else {
		$logo_qr_height = $QR_height / 2.3;
		$scale = $logo_height / $logo_qr_height;
		$logo_qr_width = $logo_width / $scale;
	}

	imagecopyresampled(
		$QR, $logo,
		(($QR_width / 2) - ($logo_qr_width / 2)),
		(($QR_height / 2) - ($logo_qr_height / 2)),
		0, 0,
		$logo_qr_width, $logo_qr_height, $logo_width, $logo_height
	);

	imagepng($QR);
	imagedestroy($QR);

	$img_stream = ob_get_contents();
	ob_end_clean();

	$file = file_save_data($img_stream, $qr_img_obj->getFileUri());
	return $file;
}


function _custom_qr_generator_frontpage_redirect() {
	$current_user = \Drupal::currentUser();
	$front_page_path = \Drupal::config('system.site')->get('page.front');

	if ($current_user->id() != 0) {
		if ($front_page_path == '/admin/qr-admin') return;

		// Check whether default front page is opened (with no query strings)
		$on_default_front_page = (\Drupal::url('<front>') == $_SERVER['REQUEST_URI']);

		if ($on_default_front_page) {
			$response = new RedirectResponse(\Drupal::url('custom_qr_generator.qr_admin'));
			$response->send();
		}
	}
}

/**
 * Implements hook_mail().
 */
function custom_qr_generator_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
  case 'qr_code_status_failed':
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['subject'] = t('Some QR code failed validation');
    $message['body'][] = SafeMarkup::checkPlain(t('The following QR codes failed:<br />'));
    $url = \Drupal::request()->getHost();;
    $message['body'][] = SafeMarkup::checkPlain('<ul>');
    foreach ($params['failed'] as $id => $title) {
      $message['body'][] = SafeMarkup::checkPlain('<li><a href="http://' . $url . '/node/' . $id . '/edit' . '">' . $title . "</a></li>");
    }
    $message['body'][] = SafeMarkup::checkPlain('</ul>');
    break;
  }
}

/**
 * Update new summary and description fields from body values.
 */
function custom_qr_generator_update_8001(&$sandbox) {
  $bundles = ['qr_node'];
  $incoming_url = 'field_incoming_url';
  $outgoing_url = 'field_outgoing_url';
  $custom_url = 'field_custom_url';

  $storage = Drupal::entityManager()->getStorage('node');
  $records = Database::getConnection()->select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $bundles, 'IN')
    ->orderBy('nid', 'ASC')
    ->execute();
  foreach ($records as $record) {
    $node = $storage->load($record->nid);
    $custom_url_value = $node->get($custom_url)->getValue();

    if (!empty($custom_url_value)) {
      $node->set($outgoing_url, $custom_url_value);
      $node->set($custom_url, NULL);
    }

    // Force a node save even if there are no changes to force the pre_save hook to be executed.
    $node->save();
  }
}
